#!/bin/bash

curl -SL "https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz" | tar xzv docker/docker --transform='s/.*/docker-cli/'
mkdir ~/.docker

# Add auths and experimental to docker-cli config
echo '{"auths": '$DOCKERCFG',"experimental":"enabled"}' > ~/.docker/config.json

# Check if all arch images are in dockerhub
AMD64_IMAGE="${DOCKER_REPO}:amd64"
ARM64_IMAGE="${DOCKER_REPO}:arm64v8"
ARM32_IMAGE="${DOCKER_REPO}:arm32v7"

echo "checking if ${AMD64_IMAGE} Manifest exists"
if ! ./docker-cli manifest inspect ${AMD64_IMAGE}; then AMD64_IMAGE='' ; fi
echo "checking if ${ARM32_IMAGE} Manifest exists"
if ! ./docker-cli manifest inspect ${ARM32_IMAGE}; then ARM32_IMAGE='' ; fi
echo "checking if ${ARM64_IMAGE} Manifest exists"
if ! ./docker-cli manifest inspect ${ARM64_IMAGE}; then ARM64_IMAGE='' ; fi

echo "Creating multiarch manifest"
./docker-cli manifest create ${DOCKER_REPO}:latest $AMD64_IMAGE $ARM32_IMAGE $ARM64_IMAGE
if [ -n "${ARM32_IMAGE}" ]; then
  ./docker-cli manifest annotate ${DOCKER_REPO}:latest $ARM32_IMAGE --os linux --arch arm
fi
if [ -n "${ARM64_IMAGE}" ]; then
  ./docker-cli manifest annotate ${DOCKER_REPO}:latest $ARM64_IMAGE --os linux --arch arm64
fi
./docker-cli manifest push ${DOCKER_REPO}:latest

rm -r docker-cli ~/.docker
